// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	model "crud/internal/model"
	store "crud/internal/store"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// Open mocks base method.
func (m *MockStore) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockStoreMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockStore)(nil).Open))
}

// Todos mocks base method.
func (m *MockStore) Todos() store.TodoRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Todos")
	ret0, _ := ret[0].(store.TodoRepository)
	return ret0
}

// Todos indicates an expected call of Todos.
func (mr *MockStoreMockRecorder) Todos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Todos", reflect.TypeOf((*MockStore)(nil).Todos))
}

// MockTodoRepository is a mock of TodoRepository interface.
type MockTodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRepositoryMockRecorder
}

// MockTodoRepositoryMockRecorder is the mock recorder for MockTodoRepository.
type MockTodoRepositoryMockRecorder struct {
	mock *MockTodoRepository
}

// NewMockTodoRepository creates a new mock instance.
func NewMockTodoRepository(ctrl *gomock.Controller) *MockTodoRepository {
	mock := &MockTodoRepository{ctrl: ctrl}
	mock.recorder = &MockTodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoRepository) EXPECT() *MockTodoRepositoryMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockTodoRepository) CreateTodo(title string) (model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", title)
	ret0, _ := ret[0].(model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockTodoRepositoryMockRecorder) CreateTodo(title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockTodoRepository)(nil).CreateTodo), title)
}

// DeleteTodo mocks base method.
func (m *MockTodoRepository) DeleteTodo(id model.ID) (model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", id)
	ret0, _ := ret[0].(model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockTodoRepositoryMockRecorder) DeleteTodo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockTodoRepository)(nil).DeleteTodo), id)
}

// GetTodos mocks base method.
func (m *MockTodoRepository) GetTodos(ids []model.ID) ([]model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodos", ids)
	ret0, _ := ret[0].([]model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodos indicates an expected call of GetTodos.
func (mr *MockTodoRepositoryMockRecorder) GetTodos(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodos", reflect.TypeOf((*MockTodoRepository)(nil).GetTodos), ids)
}

// ToggleTodo mocks base method.
func (m *MockTodoRepository) ToggleTodo(id model.ID) (model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleTodo", id)
	ret0, _ := ret[0].(model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleTodo indicates an expected call of ToggleTodo.
func (mr *MockTodoRepositoryMockRecorder) ToggleTodo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleTodo", reflect.TypeOf((*MockTodoRepository)(nil).ToggleTodo), id)
}

// UpdateTodo mocks base method.
func (m *MockTodoRepository) UpdateTodo(id model.ID, title *string, complete *bool) (model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", id, title, complete)
	ret0, _ := ret[0].(model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockTodoRepositoryMockRecorder) UpdateTodo(id, title, complete interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockTodoRepository)(nil).UpdateTodo), id, title, complete)
}
