// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "crud/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITodoService is a mock of ITodoService interface.
type MockITodoService struct {
	ctrl     *gomock.Controller
	recorder *MockITodoServiceMockRecorder
}

// MockITodoServiceMockRecorder is the mock recorder for MockITodoService.
type MockITodoServiceMockRecorder struct {
	mock *MockITodoService
}

// NewMockITodoService creates a new mock instance.
func NewMockITodoService(ctrl *gomock.Controller) *MockITodoService {
	mock := &MockITodoService{ctrl: ctrl}
	mock.recorder = &MockITodoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITodoService) EXPECT() *MockITodoServiceMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockITodoService) CreateTodo(title string) (*model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", title)
	ret0, _ := ret[0].(*model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockITodoServiceMockRecorder) CreateTodo(title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockITodoService)(nil).CreateTodo), title)
}

// DeleteTodo mocks base method.
func (m *MockITodoService) DeleteTodo(id model.ID) (*model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", id)
	ret0, _ := ret[0].(*model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockITodoServiceMockRecorder) DeleteTodo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockITodoService)(nil).DeleteTodo), id)
}

// GetTodos mocks base method.
func (m *MockITodoService) GetTodos(ids []model.ID) ([]model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodos", ids)
	ret0, _ := ret[0].([]model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodos indicates an expected call of GetTodos.
func (mr *MockITodoServiceMockRecorder) GetTodos(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodos", reflect.TypeOf((*MockITodoService)(nil).GetTodos), ids)
}

// ToggleTodo mocks base method.
func (m *MockITodoService) ToggleTodo(id model.ID) (*model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleTodo", id)
	ret0, _ := ret[0].(*model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToggleTodo indicates an expected call of ToggleTodo.
func (mr *MockITodoServiceMockRecorder) ToggleTodo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleTodo", reflect.TypeOf((*MockITodoService)(nil).ToggleTodo), id)
}

// UpdateTodo mocks base method.
func (m *MockITodoService) UpdateTodo(id model.ID, title *string, complete *bool) (*model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", id, title, complete)
	ret0, _ := ret[0].(*model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockITodoServiceMockRecorder) UpdateTodo(id, title, complete interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockITodoService)(nil).UpdateTodo), id, title, complete)
}
